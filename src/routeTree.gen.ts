/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TermsRouteImport } from './routes/terms'
import { Route as PrivacyRouteImport } from './routes/privacy'
import { Route as ComingSoonRouteImport } from './routes/coming-soon'
import { Route as IndexRouteImport } from './routes/index'

const TermsRoute = TermsRouteImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivacyRoute = PrivacyRouteImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRouteImport,
} as any)
const ComingSoonRoute = ComingSoonRouteImport.update({
  id: '/coming-soon',
  path: '/coming-soon',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coming-soon': typeof ComingSoonRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coming-soon': typeof ComingSoonRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/coming-soon': typeof ComingSoonRoute
  '/privacy': typeof PrivacyRoute
  '/terms': typeof TermsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/coming-soon' | '/privacy' | '/terms'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/coming-soon' | '/privacy' | '/terms'
  id: '__root__' | '/' | '/coming-soon' | '/privacy' | '/terms'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComingSoonRoute: typeof ComingSoonRoute
  PrivacyRoute: typeof PrivacyRoute
  TermsRoute: typeof TermsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/coming-soon': {
      id: '/coming-soon'
      path: '/coming-soon'
      fullPath: '/coming-soon'
      preLoaderRoute: typeof ComingSoonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComingSoonRoute: ComingSoonRoute,
  PrivacyRoute: PrivacyRoute,
  TermsRoute: TermsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
